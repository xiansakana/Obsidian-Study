import bisect
def solution(operations):
    obs = []
    res = ""
    
    for op in operations:
        if op[0] == 1:
            bisect.insort_right(obs, op[1])
        if op[0] == 2:
            res += binarySearch(obs, op[1], op[2])
    return res
    

def binarySearch(obs, pos, size):
    # print(obs)
    start = 0
    end = len(obs)-1
    ub = pos+size
    if ub<=obs[0] or pos>obs[-1]:
        # print("***")
        return "1"
    # print("pos,ub:",pos, ub)
    while start<=end:
        mid = start + (end-start)//2
        # print(start,end,mid)
        # print("pos, mid, ub:",pos, mid, ub)
        if pos<=obs[mid]<ub:
            return "0"
        elif obs[mid]<pos:
            start = mid + 1
        else:
            end = mid - 1
    return "1"
            


import bisect
def solution(operations):
    arr = []
    res = ""
    for op in operations:
        if op[0] == 1:
            bisect.insort_right(arr, op[1])
        else:
            res += search(arr, op[1], op[2])
    return res

def search(arr, pos, size):
    start = 0
    end = len(arr)-1
    lb = pos
    ub = pos+size-1
    while start <= end:
        mid = start + (end - start)//2
        if lb<=arr[mid]<=ub:
            return "0"
        elif arr[mid] < lb:
            start = mid + 1
        else:
            end = mid - 1
    return "1"